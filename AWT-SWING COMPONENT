import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JRadioButton;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author aggelos
 */
public class ComponentsExamples {
    
    /*
        Test various options fro creating a frame with components
    */
    public static void main(String[] args) {
        createFrameWithLabel();
        //createFrameWithButton();
        //createFrameWithComponents1();
        //createFrameWithComponents2();
        //createInheritedFrameWithComponents();
    }

    /*
        Add label to a JFrame
        Uses default layout manager (Borderlayout)
        Uncomment pack method to diplay properly
     */
    static void createFrameWithLabel() {
        JFrame frame = new JFrame("Hello");
        frame.setPreferredSize(new Dimension(400, 400));

        JLabel label = new JLabel("Hi, I'm a GUI");
        //ορισμός θέσης και διάστασης
        //label.setBounds(0, 0, 130, 50);
        //ορισμός χαρακτηριστικών
        //label.setBackground(new Color(255, 153, 153)); 
        //label.setHorizontalAlignment(JLabel.CENTER); 
        //label.setVerticalAlignment(JLabel.TOP); 
        //label.setOpaque(true);
        
        //frame.getContentPane().setLayout(null);
        //frame.getContentPane().add(label, BorderLayout.WEST);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.pack();
        frame.setVisible(true);
    }

    /*
        Add button to JFrame
        Uses absolute postion (no layout manager)
     */
    static void createFrameWithButton() {
        JFrame frame = new JFrame();//creating instance of JFrame  

        JButton b = new JButton("click");//creating instance of JButton  
        b.setBounds(130, 100, 100, 40);//x axis, y axis, width, height  
        frame.add(b);//adding button in JFrame  

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(400, 500);//400 width and 500 height  
        frame.setLayout(null);//using no layout managers  
        frame.setVisible(true);//making the frame visible  
    }

    /*
        Creates a MyFrame which inherits from JFrame.
        Add varius components (JLabel, JButton, JTextField, JTextArea, JCheckBox) to a JFrame.
        Uses absolute position for all components
    */
    static void createInheritedFrameWithComponents() {
        MyFrame frame = new MyFrame();        
        frame.initUI();          
    }
    
    /*
        Add varius components (JLabel, JButton, JTextField, JTextArea, JCheckBox) to a JFrame.
        Uses absolute position for all components
     */
    static void createFrameWithComponents1() {
        JFrame frame = new JFrame("Components Example");

        JLabel l1, l2;
        l1 = new JLabel("First Label.");
        l1.setBounds(50, 20, 100, 30);
        frame.add(l1);

        l2 = new JLabel("Second Label.");
        l2.setBounds(50, 40, 100, 30);
        frame.add(l2);

        JButton b = new JButton("Start");
        b.setBounds(50, 80, 100, 40);
        frame.add(b);

        JTextField t1, t2;
        t1 = new JTextField("Lab 7: Java user interface");
        t1.setBounds(50, 130, 200, 30);
        frame.add(t1);

        t2 = new JTextField("AWT Tutorial");
        t2.setBounds(50, 160, 200, 30);
        frame.add(t2);

        JTextArea area = new JTextArea("Lab 7: Java user interface");
        area.setBounds(50, 200, 340, 100);
        frame.add(area);

        JCheckBox checkBox1 = new JCheckBox("C++");
        checkBox1.setBounds(50, 300, 100, 50);
        frame.add(checkBox1);

        JCheckBox checkBox2 = new JCheckBox("Java", true);
        checkBox2.setBounds(50, 330, 100, 50);
        frame.add(checkBox2);

        frame.setSize(400, 450);
        frame.setLayout(null);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    /*
        Add varius components (JRadioButton, JComboBox, JTable) to a JFrame.
        Uses absolute position for all components
     */
    static void createFrameWithComponents2() {
        JFrame frame = new JFrame("Components Example");

        JRadioButton r1 = new JRadioButton("A) Male");
        JRadioButton r2 = new JRadioButton("B) Female");
        r1.setBounds(50, 20, 100, 30);
        r2.setBounds(50, 50, 100, 30);
        ButtonGroup bg = new ButtonGroup();
        bg.add(r1);
        bg.add(r2);
        frame.add(r1);
        frame.add(r2);
        
        ImageIcon icon = new ImageIcon("icon.png");
        int width = icon.getIconWidth();
        int height = icon.getIconHeight();
        JButton b = new JButton();
        b.setIcon(new ImageIcon(icon.getImage().getScaledInstance(width, -1,java.awt.Image.SCALE_SMOOTH)));
        b.setBounds(180, 30, width, height);
        
        //b.setBorder(null);
        //b.setLocation(180, 30);
        
        frame.add(b);

        String country[] = {"India", "Aus", "U.S.A", "England", "Newzealand"};
        JComboBox cb = new JComboBox(country);
        cb.setBounds(50, 90, 90, 20);
        frame.add(cb);

        String data[][] = {{"101", "John", "670000"}, {"102", "Mary", "780000"}, {"101", "Alice", "700000"}};
        String column[] = {"ID", "NAME", "SALARY"};
        JTable jt = new JTable(data, column);
        jt.setBounds(50, 120, 300, 100);
        //JScrollPane sp = new JScrollPane(jt);
        frame.add(jt);

        DefaultListModel<String> list1 = new DefaultListModel<>();
        list1.addElement("Item1");
        list1.addElement("Item2");
        list1.addElement("Item3");
        list1.addElement("Item4");
        JList<String> list = new JList<>(list1);
        list.setBounds(50, 240, 75, 75);
        frame.add(list);

        frame.setSize(500, 500);
        frame.setLayout(null);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
    

}
